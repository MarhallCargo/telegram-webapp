from fastapi import APIRouter, Request, Form, Depends, status
from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse
from fastapi.templating import Jinja2Templates
from starlette.middleware.sessions import SessionMiddleware
from sqlalchemy import select
from database import get_db
from passlib.hash import bcrypt
from sqlalchemy.ext.asyncio import AsyncSession
import os
import aiofiles
from fastapi import UploadFile, File
from models import Order, OrderFile, TopUpRequest, User  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OrderFile –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from sqlalchemy.orm import selectinload
from routers.auth import get_current_user
from config import TELEGRAM_BOT_TOKEN, MANAGER_CHAT_ID
import json
from utils import calculate_rub_by_yuan, notify_manager
from datetime import datetime
from sqlalchemy.orm import Session


router = APIRouter()

templates = Jinja2Templates(directory="templates")
TOPUP_RATE = 13.0  # –ü—Ä–∏–º–µ—Ä –∫—É—Ä—Å–∞ (–∑–∞–º–µ–Ω–∏—à—å –ø–æ–∑–∂–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)

# –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ—ë
UPLOAD_DIR = "uploads"
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)

@router.post("/order/payment_failed/{order_id}")
async def order_payment_failed(
    order_id: int,
    request: Request,
    reason: str = Form(""),
    db: AsyncSession = Depends(get_db)
):
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login", status_code=302)

    result = await db.execute(select(Order).where(Order.id == order_id, Order.user_id == user["id"]))
    order = result.scalar_one_or_none()

    if not order or order.status != "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        return HTMLResponse("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", status_code=400)

    order.status = "–æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"

    # –ú–æ–∂–Ω–æ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –ø–æ–ª–µ
    if reason:
        print(f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —É–∫–∞–∑–∞–ª –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ–ø–ª–∞—Ç—ã: {reason}")

    await db.commit()
    return RedirectResponse(url="/dashboard", status_code=302)

@router.post("/order/upload_payment/{order_id}")
async def upload_order_payment_file(
    order_id: int,
    file: UploadFile = File(...),
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(select(Order).where(Order.id == order_id))
    order = result.scalar_one_or_none()

    if not order or order.status != "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        return HTMLResponse("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", status_code=400)

    folder = "uploads"
    os.makedirs(folder, exist_ok=True)
    file_path = f"{folder}/order_payment_{order.id}_{file.filename}"
    async with aiofiles.open(file_path, "wb") as f:
        content = await file.read()
        await f.write(content)

    order.payment_proof_path = file_path
    order.status = "–æ–ø–ª–∞—á–µ–Ω–æ (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)"
    await db.commit()

    return RedirectResponse("/dashboard", status_code=302)

@router.get("/order/upload_payment/{order_id}", response_class=HTMLResponse)
async def upload_order_payment_form(order_id: int, request: Request, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Order).where(Order.id == order_id))
    order = result.scalar_one_or_none()

    if not order or order.status != "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        return HTMLResponse("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", status_code=404)

    return templates.TemplateResponse("order_upload_payment.html", {
        "request": request,
        "order": order
    })

@router.post("/order/confirm/{order_id}")
async def confirm_order(order_id: int, db: AsyncSession = Depends(get_db), user: dict = Depends(get_current_user)):
    result = await db.execute(select(Order).where(Order.id == order_id, Order.user_id == user.id))
    order = result.scalar_one_or_none()
    if order and order.status == "—Å–æ–±—Ä–∞–Ω":
        order.status = "–æ–∂–∏–¥–∞–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        await db.commit()
    return RedirectResponse("/dashboard", status_code=302)

@router.post("/profile/edit", response_class=HTMLResponse)
async def edit_profile_post(
    request: Request,
    username: str = Form(...),
    password: str = Form(None),
    db: AsyncSession = Depends(get_db)
):
    user_session = request.session.get("user")
    if not user_session:
        return RedirectResponse(url="/login", status_code=302)

    query = select(User).where(User.id == user_session["id"])
    result = await db.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return RedirectResponse(url="/login", status_code=302)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
    if username != user.username:
        check = await db.execute(select(User).where(User.username == username))
        if check.scalar_one_or_none():
            return templates.TemplateResponse("edit_profile.html", {
                "request": request,
                "user": user_session,
                "error": "–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç"
            })

    user.username = username
    if password:
        user.password = bcrypt.hash(password)

    db.add(user)
    await db.commit()
    await db.refresh(user)

    # –û–±–Ω–æ–≤–∏–º —Å–µ—Å—Å–∏—é
    request.session["user"] = {
        "id": user.id,
        "username": user.username,
        "role": user.role,
        "balance": getattr(user, "balance", 0.0)
    }

    return templates.TemplateResponse("edit_profile.html", {
        "request": request,
        "user": request.session["user"],
        "message": "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    })

@router.get("/profile/edit", response_class=HTMLResponse)
async def edit_profile_get(request: Request, db: AsyncSession = Depends(get_db)):
    user_session = request.session.get("user")
    if not user_session:
        return RedirectResponse(url="/login", status_code=302)

    return templates.TemplateResponse("edit_profile.html", {"request": request, "user": user_session})


@router.get("/balance/history", response_class=HTMLResponse)
async def balance_history(request: Request, db: AsyncSession = Depends(get_db)):
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)

    query = select(TopUpRequest).where(
        TopUpRequest.user_id == user["id"],
        TopUpRequest.status == "confirmed"
    ).order_by(TopUpRequest.created_at.desc())
    result = await db.execute(query)
    history = result.scalars().all()

    return templates.TemplateResponse("balance_history.html", {
        "request": request,
        "history": history,
        "user": user
    })

@router.get("/topup/upload/{topup_id}", response_class=HTMLResponse)
async def upload_payment_form(topup_id: int, request: Request, db: AsyncSession = Depends(get_db)):
    query = select(TopUpRequest).where(TopUpRequest.id == topup_id)
    result = await db.execute(query)
    topup = result.scalar_one_or_none()

    if not topup or topup.status != "waiting_for_payment":
        return HTMLResponse("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", status_code=404)

    return templates.TemplateResponse("upload_payment.html", {
        "request": request,
        "topup": topup
    })

@router.get("/topup/upload/{topup_id}", response_class=HTMLResponse)
async def upload_payment_form(topup_id: int, request: Request, db: AsyncSession = Depends(get_db)):
    query = select(TopUpRequest).where(TopUpRequest.id == topup_id)
    result = await db.execute(query)
    topup = result.scalar_one_or_none()

    if not topup or topup.status != "waiting_for_payment":
        return HTMLResponse("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", status_code=404)

    return templates.TemplateResponse("upload_payment.html", {
        "request": request,
        "topup": topup
    })

@router.get("/balance/topup", response_class=HTMLResponse)
async def topup_balance_form(request: Request):
    with open("config.json", "r", encoding="utf-8") as f:
        config_data = json.load(f)
        current_rate = config_data.get("CNY", 13.0)
    return templates.TemplateResponse("topup_balance.html", {
        "request": request,
        "rate": current_rate
    })

@router.post("/balance/topup", response_class=HTMLResponse)
async def submit_topup(
    request: Request,
    cny_amount: int = Form(...),  # üí¥ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —é–∞–Ω–∏
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∏–∑ config.json
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config_data = json.load(f)
            base_cny_rate = config_data.get("CNY", 13.0)
    except (FileNotFoundError, json.JSONDecodeError):
        base_cny_rate = 13.0

    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö
    rub_amount, used_rate, commission = calculate_rub_by_yuan(cny_amount, base_cny_rate)

    if rub_amount == 0:
        return templates.TemplateResponse("topup_balance.html", {
            "request": request,
            "rate": base_cny_rate,
            "error": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî –æ—Ç 350 —é–∞–Ω–µ–π. –£–≤–µ–ª–∏—á—å—Ç–µ —Å—É–º–º—É."
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
    new_request = TopUpRequest(
        user_id=current_user.id,
        rub_amount=rub_amount,
        cny_amount=cny_amount,
        status="waiting_for_details"  # üü° —Å—Ä–∞–∑—É –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    )

    db.add(new_request)
    await db.commit()
    await db.refresh(new_request)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    commission_rub = rub_amount - (cny_amount * base_cny_rate)
    message = (
        f"üîî –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user.username}\n"
        f"üí¥ {cny_amount} ¬• ‚âà {rub_amount} —Ä—É–±\n"
        f"üìä –ö—É—Ä—Å: {used_rate:.2f} —Ä—É–±/—é–∞–Ω—å (–∫–æ–º–∏—Å—Å–∏—è {commission}%)\n"
        f"üí∞ –ö–æ–º–∏—Å—Å–∏—è ‚âà {commission_rub:.0f} —Ä—É–±"
    )
    await notify_manager(message)

    return RedirectResponse(url="/dashboard", status_code=302)

@router.get("/login", response_class=HTMLResponse)
async def login_get(request: Request):
    return templates.TemplateResponse("login.html", {"request": request, "error": None})


@router.post("/login", response_class=HTMLResponse)
async def login_post(
        request: Request,
        username: str = Form(...),
        password: str = Form(...),
        db: AsyncSession = Depends(get_db)
):
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    query = select(User).where(User.username == username)
    result = await db.execute(query)
    user = result.scalar_one_or_none()
    if user is None or not bcrypt.verify(password, user.password):
        return templates.TemplateResponse("login.html", {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    request.session["user"] = {
        "id": user.id,
        "username": user.username,
        "role": user.role,
        "balance": user.balance
    }

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    return RedirectResponse(url="/dashboard", status_code=status.HTTP_302_FOUND)


@router.post("/create_order", response_class=HTMLResponse)
async def create_order_post(
        request: Request,
        links: list[str] = Form(default=[]),
        link_notes: list[str] = Form(default=[]),
        files: list[UploadFile] = File(default=[]),
        file_notes: list[str] = Form(default=[]),
        db: AsyncSession = Depends(get_db)
):
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login", status_code=302)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    new_order = Order(
        description="–°–æ–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞",
        user_id=user["id"],
        status="–Ω–æ–≤—ã–π"
    )
    db.add(new_order)
    await db.commit()
    await db.refresh(new_order)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
    for url, note in zip(links, link_notes):
        if url.strip():
            db.add(OrderLink(order_id=new_order.id, url=url.strip(), note=note.strip()))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    for i, upload in enumerate(files):
        if upload.filename:
            folder = "uploads"
            os.makedirs(folder, exist_ok=True)
            file_path = f"{folder}/{new_order.id}_{upload.filename}"
            async with aiofiles.open(file_path, "wb") as out_file:
                content = await upload.read()
                await out_file.write(content)

            note = file_notes[i] if i < len(file_notes) else ""
            db.add(OrderAttachment(
                order_id=new_order.id,
                file_path=file_path,
                filename=upload.filename,
                note=note.strip()
            ))

    await db.commit()

    return RedirectResponse(url="/dashboard", status_code=302)

@router.post("/topup/upload/{topup_id}")
async def upload_payment_file(
    topup_id: int,
    file: UploadFile = File(...),
    db: AsyncSession = Depends(get_db)
):
    query = select(TopUpRequest).where(TopUpRequest.id == topup_id)
    result = await db.execute(query)
    topup = result.scalar_one_or_none()

    if not topup or topup.status != "waiting_for_payment":
        return HTMLResponse("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", status_code=404)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    folder = "uploads"
    os.makedirs(folder, exist_ok=True)
    file_path = f"{folder}/proof_{topup.id}_{file.filename}"
    async with aiofiles.open(file_path, "wb") as out_file:
        content = await file.read()
        await out_file.write(content)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    topup.payment_proof_path = file_path
    topup.status = "waiting_for_confirmation"
    db.add(topup)
    await db.commit()

    return RedirectResponse(url="/dashboard", status_code=302)

@router.get("/create_order", response_class=HTMLResponse)
async def create_order_get(request: Request):
    return templates.TemplateResponse("create_order.html", {"request": request})

@router.get("/logout")
async def logout(request: Request):
    request.session.clear()
    return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)

@router.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request, db: AsyncSession = Depends(get_db), user: User = Depends(get_current_user)):
    result = await db.execute(
        select(Order)
        .options(
            selectinload(Order.files),
            selectinload(Order.links),
            selectinload(Order.attachments)
        )
        .where(Order.user_id == user.id)
        .order_by(Order.created_at.desc())
    )
    orders = result.scalars().all()

    # üí° –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    topups_query = select(TopUpRequest).where(TopUpRequest.user_id == user.id).order_by(TopUpRequest.created_at.desc())
    topup_result = await db.execute(topups_query)
    topup_requests = topup_result.scalars().all()
    active_topup_count = len([
        r for r in topup_requests
        if r.status in ("waiting_for_details", "waiting_for_payment", "waiting_for_confirmation")
    ])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        yuan_rate = config.get("CNY", 12.8)
        usd_rate = config.get("USD", 91.5)
    except (FileNotFoundError, json.JSONDecodeError):
        yuan_rate = 13.0
        usd_rate = 90.0

    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "user": user,
        "orders": orders,
        "topup_requests": topup_requests,
        "yuan_rate": yuan_rate,
        "active_topup_count": active_topup_count,
        "usd_rate": usd_rate,
        "now": datetime.now()
    })

@router.get("/chat", response_class=HTMLResponse)
async def chat_page(request: Request):
    return templates.TemplateResponse("chat.html", {"request": request})

@router.get("/profile", response_class=HTMLResponse)
async def get_profile(request: Request):
    user = request.session.get("user")
    if not user:
        return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)
    return templates.TemplateResponse("profile.html", {"request": request, "user": user, "error": None})

@router.post("/profile", response_class=HTMLResponse)
async def update_profile(
    request: Request,
    username: str = Form(...),
    password: str = Form(None),
    balance: float = Form(0.0),
    db: AsyncSession = Depends(get_db)
):
    user_session = request.session.get("user")
    if not user_session:
        return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = select(User).where(User.id == user_session["id"])
    result = await db.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return templates.TemplateResponse(
            "profile.html",
            {"request": request, "user": user_session, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        )

    # üîí –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–≤–µ–¥—ë–Ω –≤—Ä—É—á–Ω—É—é)
    if username != user.username:
        return templates.TemplateResponse(
            "profile.html",
            {"request": request, "user": user_session, "error": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ"}
        )

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if password:
        if not (6 <= len(password) <= 20):
            return templates.TemplateResponse(
                "profile.html",
                {"request": request, "user": user_session, "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 6 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤"}
            )
        user.password = bcrypt.hash(password)

    db.add(user)
    await db.commit()
    await db.refresh(user)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    request.session["user"] = {
        "id": user.id,
        "username": user.username,
        "role": user.role,
        "balance": getattr(user, "balance", 0.0)
    }

    return RedirectResponse(url="/dashboard", status_code=status.HTTP_302_FOUND)

@router.get("/download_file/{file_id}", response_class=FileResponse)
async def download_file(file_id: int, db: AsyncSession = Depends(get_db)):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ id
    query = select(OrderFile).where(OrderFile.id == file_id)
    result = await db.execute(query)
    order_file = result.scalar_one_or_none()
    if not order_file:
        return HTMLResponse(content="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=404)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º
    return FileResponse(path=order_file.file_path, filename=order_file.filename)
